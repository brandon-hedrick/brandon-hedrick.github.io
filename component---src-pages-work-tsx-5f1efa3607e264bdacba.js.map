{"version":3,"sources":["webpack:///./src/components/GithubProjects/index.tsx","webpack:///./src/components/GithubProjects/styled.ts","webpack:///./src/components/LoadingIcon/index.tsx","webpack:///./src/components/MainContentSection/index.tsx","webpack:///./src/components/MainContentSection/styled.ts","webpack:///./src/components/TitularLayout/index.tsx","webpack:///./src/components/TitularLayout/styled.ts","webpack:///./src/pages/work.tsx"],"names":[],"mappings":"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","file":"component---src-pages-work-tsx-5f1efa3607e264bdacba.js","sourcesContent":["import * as React from 'react';\n\nimport LoadingIcon from '../LoadingIcon';\nimport { ProjectList, ProjectItem, ProjectTitle, ProjectTitleWrapper, ProjectBody, ProjectFooter,\n  ProjectLangBadge, ProjectLinkToGH, ProjectUpdateDate } from './styled';\ninterface GithubProjectsState {\n  loading: boolean;\n  projects?: any[];\n  error?: string;\n}\n\nclass GithubProjects extends React.Component<{}, GithubProjectsState> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.createGitHubProjects();\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.loading && <LoadingIcon/>}\n        <ProjectList>{this.state.projects}</ProjectList>\n      </div>\n    );\n  }\n\n  fetchGithubProjects() {\n    return fetch('https://api.github.com/users/brandon-hedrick/repos')\n      .then((res) => res.json());\n  }\n\n  async createGitHubProjects() {\n    const results = await this.fetchGithubProjects();\n    if (results && Array.isArray(results)) {\n      this.setState((s) =>\n        ({\n          projects: results.map((r, i) =>\n            <Project key={i} name={r.name} description={r.description} language={r.language}\n            updated={`Updated ${this.formatDate(r.updated_at)}`} href={r.html_url}/>,\n          ),\n        }),\n      );\n    } else {\n      // error handling\n      console.log(results);\n    }\n    this.setState((s) => ({ loading: false }));\n  }\n\n  formatDate(d: string) {\n    const date = new Date(d);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  }\n}\n\nexport default GithubProjects;\n\ninterface ProjectProps {\n  name?: string;\n  description?: string;\n  language?: string;\n  updated?: string;\n  href?: string;\n}\n\nconst Project: React.SFC<ProjectProps> = ({ name, description, language, updated, href }) => (\n  <ProjectItem>\n    <ProjectTitleWrapper>\n      <ProjectTitle>{name}</ProjectTitle>\n      <ProjectLangBadge>{language}</ProjectLangBadge>\n    </ProjectTitleWrapper>\n    <ProjectBody>\n      <p>{description}</p>\n    </ProjectBody>\n    <ProjectFooter>\n      <ProjectUpdateDate>{updated}</ProjectUpdateDate>\n      <ProjectLinkToGH target='_blank' href={href}>View on Github</ProjectLinkToGH>\n    </ProjectFooter>\n  </ProjectItem>\n);\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/GithubProjects/index.tsx","import styled from 'styled-components';\nimport { StyledTypography, titillium, butler } from '../../styles/typography';\nimport { Colors } from '../../styles/colors';\nimport { MobileLikeFormat } from '../../styles/breakpoints';\n\nexport const ProjectList = styled.ul`\n  margin: 0\n`;\n\nexport const ProjectItem = styled.li`\n  color: ${Colors.lightGrey};\n  background-color: ${Colors.deepGrey};\n  list-style: none;\n  padding: 3rem;\n  margin-bottom: 3rem;\n`;\n\nexport const ProjectTitleWrapper = styled.div`\n  display: flex;\n  align-items: flex-end;\n  justify-content: flex-start;\n  overflow: hidden;\n  ${MobileLikeFormat(`\n    flex-direction: column;\n    align-items: flex-start;\n  `)}\n`;\n\nexport const ProjectTitle = styled.h5`\n  ${StyledTypography.darkHeading}\n  margin: 0;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  ${MobileLikeFormat(`\n    white-space: normal;\n  `)}\n`;\n\nexport const ProjectLangBadge = styled.span`\n  display: inline-block;\n  background-color: ${Colors.darkGrey};\n  padding: .75rem 1.25rem;\n  border-radius: 1rem;\n  font-family: ${titillium};\n  font-size: 1.25rem;\n  margin-left: 1rem;\n  ${MobileLikeFormat(`\n    margin-left: 0;\n    padding: 1rem 1.25rem;\n    margin-top: 2rem;\n    font-size: 2rem;\n  `)}\n`;\n\nexport const ProjectBody = styled.div`\n  margin: 3rem 0;\n  font-family: ${butler.medium};\n  font-size: 1.25rem;\n  line-height: 160%;\n  letter-spacing: .05rem;\n  ${MobileLikeFormat(`\n    font-size: 2.5rem;\n  `)}\n`;\n\nexport const ProjectFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n`;\n\nexport const ProjectUpdateDate = styled.span`\n  font-family: ${titillium};\n  font-size: 1.25rem;\n  ${MobileLikeFormat(`\n    font-size: 2rem;\n  `)}\n`;\n\nexport const ProjectLinkToGH = styled.a`\n  display: block;\n  padding: .75rem 1.25rem;\n  border: .1rem solid ${Colors.lightGrey};\n  color: ${Colors.lightGrey};\n  font-family: ${titillium};\n  text-decoration: none;\n  transition: 0.25s ease;\n  &:hover {\n    background-color: ${Colors.lightGrey};\n    color: ${Colors.darkGrey};\n  };\n  ${MobileLikeFormat(`\n    font-size: 2rem;\n    height: 5.8rem;\n    padding: 2rem 2.5rem;\n  `)}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/GithubProjects/styled.ts","import * as React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { Colors } from '../../styles/colors';\n\nconst LoadingIcon = () => (\n  <LoadingIconWrapper>\n    <StyledLoadingIconPip></StyledLoadingIconPip>\n    <StyledLoadingIconPip offset={1}></StyledLoadingIconPip>\n    <StyledLoadingIconPip offset={2}></StyledLoadingIconPip>\n  </LoadingIconWrapper>\n);\n\nexport default LoadingIcon;\n\nconst LoadingIconWrapper = styled.div`\n  width: 6rem;\n  margin: auto auto;\n  display: flex;\n  align-items: center;\n  justify-content:space-around;\n`;\n\nconst bouncedelay = keyframes`\n  0%, 80%, 100% {\n    -webkit-transform: scale(0);\n    transform: scale(0);\n  } 40% {\n    -webkit-transform: scale(1.0);\n    transform: scale(1.0);\n  }\n`;\n\ninterface LoadingIconPip {\n  offset?: number;\n  className?: string;\n}\n\nconst LoadingIconPip: React.SFC<LoadingIconPip> = ({ className }) => (\n  <div className={className}>\n  </div>\n);\n\nconst StyledLoadingIconPip = styled(LoadingIconPip)`\n  width: 1.5rem;\n  height: 1.5rem;\n  background-color: ${Colors.grey};\n  border-radius: 100%;\n  display: inline-block;\n  animation: ${bouncedelay} .8s infinite ease-in-out both;\n  animation-delay: ${(props: LoadingIconPip) => props.offset ? `${props.offset * .1}s` : 0};\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/LoadingIcon/index.tsx","import * as React from 'react';\n\nimport TitularLayout from '../TitularLayout';\nimport { SplitColumn } from '../SplitLayout/styled';\nimport { StyledParagraphWrapper } from './styled';\n\ninterface MainContentSectionProps {\n  children: any;\n  title: string;\n  subtitle?: string;\n}\n\nconst MainContentSection: React.SFC<MainContentSectionProps> = ({ children, title, subtitle }) => (\n  <SplitColumn>\n    <TitularLayout title={title} subtitle={subtitle} />\n    <StyledParagraphWrapper>\n      { children }\n    </StyledParagraphWrapper>\n  </SplitColumn>\n);\n\nexport default MainContentSection;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/MainContentSection/index.tsx","import styled from 'styled-components';\n\nimport { StyledTypography } from '../../styles/typography';\nimport { MobileLikeFormat } from '../../styles/breakpoints';\n\nexport const StyledParagraphWrapper = styled.div`\n  margin-top: 1rem;\n  padding-top: 1.5rem;\n  padding-left: 2.5rem;\n  overflow: scroll;\n  ${StyledTypography.paragraph}\n  ${MobileLikeFormat(\n    `padding-left: 0rem;`,\n  )}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/MainContentSection/styled.ts","import * as React from 'react';\n\nimport { TitularLayoutWrapper, Title, Subtitle } from './styled';\n\ninterface TitularLayoutProps {\n  title: string;\n  subtitle?: string;\n}\n\nconst TitularLayout: React.SFC<TitularLayoutProps> = ({title, subtitle}) => (\n  <TitularLayoutWrapper>\n    <Title>{title}</Title>\n    {\n      subtitle &&\n      <Subtitle>{subtitle}</Subtitle>\n    }\n  </TitularLayoutWrapper>\n);\n\nexport default TitularLayout;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/TitularLayout/index.tsx","\nimport styled from 'styled-components';\n\nimport { StyledTypography } from '../../styles/typography';\nimport { MobileLikeFormat } from '../../styles/breakpoints';\n\nexport const TitularLayoutWrapper = styled.div`\n  position: relative;\n  padding-bottom: 1rem;\n`;\n\nexport const Title = styled.h2`\n  ${StyledTypography.pageTitle}\n  line-height: 8.75rem;\n  margin: 0;\n  ${MobileLikeFormat(`\n  line-height: auto;\n  `)}\n`;\n\nexport const Subtitle = styled.h3`\n  ${StyledTypography.pageSubtitle}\n  left: 2.5rem;\n  position: absolute;\n  bottom: 0.1rem;\n  margin: 0;\n  ${MobileLikeFormat(`\n    position: static;\n  `)}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/TitularLayout/styled.ts","import * as React from 'react';\nimport styled from 'styled-components';\n\nimport SplitLayout from '../components/SplitLayout';\nimport { SplitColumn } from '../components/SplitLayout/styled';\nimport MainContentSection from '../components/MainContentSection';\nimport GithubProjects from '../components/GithubProjects';\n\nimport { StyledTypography } from '../styles/typography';\n\nconst WorkPage = () => (\n  <SplitLayout\n    primary={\n      <Primary/>\n    }\n    secondary={\n      <Secondary/>\n    }\n  />\n);\n\nexport default WorkPage;\n\nconst Primary = () => (\n  <MainContentSection title={'Work'} subtitle={'I like to make cool stuff...'}>\n    <p>\n      With my current job, I’m not legally allowed to share any of the code I’ve written or release any client\n      information. With that said, I make all kinds of cool stuff in my free time.\n    </p>\n    <p>\n      Over the years I’ve started on lots of projects that I used to learn new libraries, concepts or maybe just to do\n      something fun. I even finished some of them too!\n    </p>\n    <p>\n      Here you’ll find a list of projects from my Github. Feel free to check me out and see what I’ve been up to\n      lately!\n    </p>\n  </MainContentSection>\n);\n\nconst Secondary = () => (\n  <StyledSplitColumn>\n    <GithubProjectsTitle>I've Made...</GithubProjectsTitle>\n    <GithubProjects/>\n  </StyledSplitColumn>\n);\n\nconst StyledSplitColumn = styled(SplitColumn)`\n  padding: 2rem 4rem 4rem;\n  overflow: auto;\n`;\n\nexport const GithubProjectsTitle = styled.h4`\n  margin: 0;\n  margin-bottom: 4.375rem;\n  ${StyledTypography.darkTitle}\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/work.tsx"],"sourceRoot":""}